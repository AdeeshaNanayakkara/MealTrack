import 'package:flutter/material.dart';
import 'package:firebase_core/firebase_core.dart';
import 'package:eatro/firebase_options.dart'; // Generated by FlutterFire CLI

// Assuming LoginPage exists at this path based on your provided code.
import 'package:eatro/Feature/Auth/pages/login.dart';

// The main function now initializes Firebase before running the app.
void main() async {
  // Ensure that Flutter bindings are initialized before calling Firebase.
  WidgetsFlutterBinding.ensureInitialized();

  // Initialize Firebase using the generated options file.
  await Firebase.initializeApp(options: DefaultFirebaseOptions.currentPlatform);

  runApp(const MyApp());
}

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'EAT',
      debugShowCheckedModeBanner: false,
      theme: ThemeData(
        primarySwatch: Colors.blue,
        visualDensity: VisualDensity.adaptivePlatformDensity,
      ),
      home: const SplashScreen(), // The app now starts with your splash screen
    );
  }
}

class SplashScreen extends StatefulWidget {
  const SplashScreen({super.key});

  @override
  State<SplashScreen> createState() => _SplashScreenState();
}

class _SplashScreenState extends State<SplashScreen> {
  // Define the theme colors
  static const Map<String, Color> theme = {
    'primary': Color(0xFF5B79FF),
    'secondary': Color(0xFFFFFFFF),
  };

  @override
  void initState() {
    super.initState();
    // Navigate to the LoginPage after 3 seconds
    Future.delayed(const Duration(seconds: 3), () {
      if (mounted) {
        Navigator.of(context).pushReplacement(
          MaterialPageRoute(
            builder: (_) => const LoginPage(), // Navigates to LoginPage
          ),
        );
      }
    });
  }

  @override
  Widget build(BuildContext context) {
    final Size size = MediaQuery.of(context).size;

    return Scaffold(
      backgroundColor: theme['secondary'],
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          crossAxisAlignment: CrossAxisAlignment.center,
          children: [
            // Logo Image
            Image.asset(
              'lib/assets/app_name.png', // Ensure this asset exists in your project
              width: size.width * 0.55,
              fit: BoxFit.contain,
              errorBuilder: (context, error, stackTrace) {
                // Fallback widget if the image fails to load
                return Container(
                  width: size.width * 0.35,
                  height: size.width * 0.35,
                  color: Colors.grey[200],
                  child: Center(
                    child: Icon(
                      Icons.fastfood,
                      size: size.width * 0.2,
                      color: Colors.grey[600],
                    ),
                  ),
                );
              },
            ),
            SizedBox(height: size.height * 0.05),
            // Loading Indicator
            SizedBox(
              width: size.height * 0.2,
              height: 5,
              child: LinearProgressIndicator(
                valueColor: AlwaysStoppedAnimation<Color>(theme['primary']!),
                // ignore: deprecated_member_use
                backgroundColor: theme['primary']!.withOpacity(0.3),
              ),
            ),
          ],
        ),
      ),
    );
  }
}
